import { Injectable } from '@nestjs/common';

import { InjectModel } from '@nestjs/sequelize';
import { Phrase } from '../phrases/phrase.model';
import { SubtitlePhrases } from './subtitle-phrases.model';
import { Subtitle } from './subtitle.model';
import { Transaction } from 'sequelize';
import axios from 'axios';
import { logGPT } from '../uitils/gptLogger';
import { SubtitleChunkDto } from './dto/subtitle-chunk.dto';
import { plainToInstance } from 'class-transformer';
import { validate } from 'class-validator';

export interface SubtitleEntry {
  id: string;
  startTime: string;
  startSeconds: number;
  endTime: string;
  endSeconds: number;
  text: string;
  phrases: { original: string; translate: string; type: string }[] | null;
}

@Injectable()
export class SubtitleProcessor {
  constructor(
    @InjectModel(Phrase) private phraseModel: typeof Phrase,
    @InjectModel(Subtitle) private subtitleModel: typeof Subtitle,
    @InjectModel(SubtitlePhrases)
    private subtitlePhrasesModel: typeof SubtitlePhrases,
  ) {}

  async extractPhrasesFromSubtitles(
    subtitles: Subtitle[],
    transaction?: Transaction,
  ): Promise<void> {
    const chunkSize = 60;
    const chunks = this.chunkSubtitles(subtitles, chunkSize);

    for (const chunk of chunks) {
      const gptResponse = await this.analyzeChunk(chunk);
      await this.saveResults(chunk, gptResponse, transaction);
    }
  }

  private chunkSubtitles(subtitles: Subtitle[], size: number): Subtitle[][] {
    const chunks: Subtitle[][] = [];
    for (let i = 0; i < subtitles.length; i += size) {
      chunks.push(subtitles.slice(i, i + size));
    }
    return chunks;
  }

  private async analyzeChunk(chunk: Subtitle[]): Promise<any[]> {
    const prompt = this.buildPrompt(chunk);

    const fallBack: SubtitleChunkDto[] = chunk.map((s) => ({
      text: s.text,
      translate: null,
      phrasal_verbs: [],
      idioms: [],
      ai_translate_comment: null,
      ai_translate: null,
    }));

    const maxRetries = 3;
    let attempt = 0;

    while (attempt < maxRetries) {
      attempt++;

      try {
        const response = await axios.post(
          'https://api.proxyapi.ru/openai/v1/chat/completions',
          {
            model: 'gpt-4o-mini-2024-07-18',
            messages: [
              {
                role: 'user',
                content: prompt,
              },
            ],
            temperature: 0.3,
          },
          {
            headers: {
              Authorization: `Bearer ${process.env.PROXY_API_KEY}`,
            },
          },
        );
        if (process.env.NODE_ENV === 'development') {
          logGPT({ prompt, response: response.data });
        }
        const content = response.data.choices?.[0]?.message?.content;

        const rawData = this.extractJsonFromResponse(content || '[]');
        if (rawData) {
          const validated = await this.validateSubtitleChunks(rawData);
          return validated;
        }
        return rawData;
      } catch (error) {
        if (process.env.NODE_ENV === 'development') {
          logGPT({ prompt, error });
        }
        console.error('ProxyAPI GPT request failed:', error);
      }
    }
    return fallBack;
  }

  private async saveResults(
    originalChunk: Subtitle[],
    gptResults: SubtitleChunkDto[],
    transaction?: Transaction,
  ): Promise<void> {
    const resultMap = new Map<string, SubtitleChunkDto>();

    for (const entry of gptResults) {
      resultMap.set(entry.text.trim(), {
        phrasal_verbs: entry.phrasal_verbs || [],
        idioms: entry.idioms || [],
        translate: entry.translate ?? null,
        text: entry.text,
        ai_translate_comment: entry.ai_translate_comment ?? null,
        ai_translate: entry.ai_translate ?? null,
      });
    }

    for (const sub of originalChunk) {
      const result = resultMap.get(sub.text.trim());
      if (!result) continue;

      await this.subtitleModel.update(
        {
          ai_translate: result.ai_translate,
          ai_translate_comment: result.ai_translate_comment,
        },
        { where: { id: Number(sub.id) }, transaction },
      );

      const allPhrases = [
        ...result.phrasal_verbs.map((p) => ({
          original: p.phrase,
          translation: p.translate,
          type: 'phrasal_verb',
        })),
        ...result.idioms.map((p) => ({
          original: p.phrase,
          translation: p.translate,
          type: 'idiom',
        })),
      ];

      for (const phraseData of allPhrases) {
        const phrase = await this.phraseModel.create(
          phraseData as {
            original: string;
            translation: string;
            type: 'idiom' | 'phrasal_verb';
          },
        );

        await this.subtitlePhrasesModel.findOrCreate({
          where: { subtitleId: Number(sub.id), phraseId: phrase.id },
          transaction,
        });
      }
    }
  }

  buildPrompt(chunk: Subtitle[]): string {
    const chunkDate = Date.now();

    const subtitleTexts = chunk.map((s) => ({
      text: s.text,
      translate: s.translate,
    }));

    return `–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞–Ω–∫–∞ ${chunkDate} –¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ª–∏–Ω–≥–≤–∏—Å—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Ñ–∏–ª—å–º–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å **–°–¢–†–û–ì–û –í–ê–õ–ò–î–ù–´–ô JSON** —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º, –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏.
  –í –æ—Ç–≤–µ—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞–π –ø—Ä–æ—Å—Ç–æ JSON –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –¥—Ä—É–≥–∏—Ö –≤–æ–ª—å–Ω–æ—Å—Ç–µ–π —á—Ç–æ–±—ã —è –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å JSON.parse(–¢–≤–æ–π –æ—Ç–≤–µ—Ç) –±–µ–∑ –æ—à–∏–±–æ–∫ 
  
  –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—É–±—Ç–∏—Ç—Ä–∞:

  - –ü–µ—Ä–µ–≤–µ–¥–∏ —Å—É–±—Ç–∏—Ç—Ä —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–≤–∫–ª—é—á–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç—Ä–æ–∫–∏).
- –¢—ã —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ—à—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤ –ø–æ–ª–µ translate ‚Äî **–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å**, –º–æ–∂–µ—à—å –Ω–∞ –Ω–µ–≥–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–ª—É—á—à–∞—Ç—å, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –≤ –ø–æ–ª–µ ai_translate.
- –ù–∞–π–¥–∏ —Ñ—Ä–∞–∑–æ–≤—ã–µ –≥–ª–∞–≥–æ–ª—ã –∏ –∏–¥–∏–æ–º—ã (–≤ —Ç–æ–º —á–∏—Å–ª–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ, –≤–∏–¥–æ–∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –∏–ª–∏ —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ).
- –°–æ—Ö—Ä–∞–Ω–∏ —Ç–æ—á–Ω—É—é —Ñ–æ—Ä–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ ‚Äî **–ù–ï** –ø–µ—Ä–µ–≤–æ–¥—è –≤ –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤.
- –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å—É–±—Ç–∏—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Å–ª–µ–Ω–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–π–º–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ—Å–∏—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, –æ–±—ä—è—Å–Ω–∏ –µ–≥–æ –∏ –ø–æ–ª–æ–∂–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ –ø–æ–ª–µ ai_translate_comment (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
- –ï—Å–ª–∏ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —É—Å—Ç–∞–Ω–æ–≤–∏ ai_translate_comment –≤ null.

üî¥ –í–∞–∂–Ω–æ:
  - **–°–¢–†–û–ì–û —Å–æ–±–ª—é–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON.**
- –í –º–∞—Å—Å–∏–≤–∞—Ö phrasal_verbs –∏ idioms –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º —Å –¥–≤—É–º—è –∫–ª—é—á–∞–º–∏: "phrase" –∏ "translate".
  ‚ùå –ù–µ–ª—å–∑—è –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Ç–∏–ø–∞ ["see value"] ‚Äî —ç—Ç–æ **–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç**.

‚úÖ –í—ã—Ö–æ–¥–Ω–æ–π JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–∞:

  [
    {
      "text": "–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—É–±—Ç–∏—Ç—Ä",
      "translate": "–ø–µ—Ä–µ–≤–æ–¥ –∏–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ—Ç",
      "ai_translate": "—Ç–≤–æ–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥",
      "phrasal_verbs": [
        { "phrase": "—Ñ—Ä–∞–∑–æ–≤—ã–π –≥–ª–∞–≥–æ–ª", "translate": "–ø–µ—Ä–µ–≤–æ–¥" }
      ],
      "idioms": [
        { "phrase": "–∏–¥–∏–æ–º–∞", "translate": "–ø–µ—Ä–µ–≤–æ–¥" }
      ],
      "ai_translate_comment": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –∏–ª–∏ null"
    }
  ]

üìò –ü—Ä–∏–º–µ—Ä—ã –≤—ã—Ä–∞–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å:

  **–§—Ä–∞–∑–æ–≤—ã–µ –≥–ª–∞–≥–æ–ª—ã:**
- "pick up" ‚Üí "–ø–æ–¥–æ–±—Ä–∞—Ç—å, –∑–∞–±—Ä–∞—Ç—å"
- "run into" ‚Üí "–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å"
- "get over it" ‚Üí "–ø–µ—Ä–µ–∂–∏—Ç—å, —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —á–µ–º-—Ç–æ"
- "give up" ‚Üí "—Å–¥–∞–≤–∞—Ç—å—Å—è"
- "break down" ‚Üí "—Å–ª–æ–º–∞—Ç—å—Å—è (—Ç–µ—Ö–Ω–∏–∫–∞ –∏–ª–∏ —á–µ–ª–æ–≤–µ–∫)"
- "hold on" ‚Üí "–ø–æ–¥–æ–∂–¥–∏"
- "carry on" ‚Üí "–ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å"
- "look it up" ‚Üí "–ø–æ–∏—Å–∫–∞—Ç—å (–≤ —Å–ª–æ–≤–∞—Ä–µ, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ)"

**–ò–¥–∏–æ–º—ã –∏ —É—Å—Ç–æ–π—á–∏–≤—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è:**
- "a piece of cake" ‚Üí "–æ—á–µ–Ω—å –ª–µ–≥–∫–æ"
- "hit the sack" ‚Üí "–ª–µ—á—å —Å–ø–∞—Ç—å"
- "break a leg" ‚Üí "–Ω–∏ –ø—É—Ö–∞ –Ω–∏ –ø–µ—Ä–∞"
- "under the weather" ‚Üí "—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ø–ª–æ—Ö–æ"
- "spill the beans" ‚Üí "–≤—ã–¥–∞—Ç—å —Å–µ–∫—Ä–µ—Ç"


üìô –ü—Ä–∏–º–µ—Ä —Å–ª–æ–∂–Ω–æ–≥–æ —Å—É–±—Ç–∏—Ç—Ä–∞ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è:

  **–û—Ä–∏–≥–∏–Ω–∞–ª:**
And certainly not when you got Liberia's deficit in your sky rocket.

**–†–∞–∑–±–æ—Ä:**

"ai_translate_comment": "–§—Ä–∞–∑–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –∫–æ–∫–Ω–∏-—Å–ª—ç–Ω–≥–µ: 'sky rocket' –æ–∑–Ω–∞—á–∞–µ—Ç '–∫–∞—Ä–º–∞–Ω'. 'Liberia's deficit' ‚Äî –≥–∏–ø–µ—Ä–±–æ–ª–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ."

–í–æ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã:
${JSON.stringify(subtitleTexts)}
`;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –±—É—Ñ–µ—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤.
   * @param buffer - –ë—É—Ñ–µ—Ä —Ñ–∞–π–ª–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
   * @returns –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
   */
  async parse(buffer: Buffer): Promise<SubtitleEntry[]> {
    const { default: SrtParser2 } = await import('srt-parser-2');
    const parser = new SrtParser2();
    const content = buffer.toString('utf-8');
    return parser.fromSrt(content) as SubtitleEntry[];
  }

  async validateSubtitleChunks(data: any[]) {
    const validatedChunks: SubtitleChunkDto[] = [];

    for (const rawItem of data) {
      const instance = plainToInstance(SubtitleChunkDto, rawItem, {
        exposeDefaultValues: true,
        enableImplicitConversion: true,
      });
      const errors = await validate(instance);
      if (errors.length === 0) {
        validatedChunks.push(instance);
      } else {
        console.log(
          'Validation failed, using fallback:',
          JSON.stringify(errors),
        );
        const stub = this.fallbackStub(rawItem?.text || 'UNKNOWN');
        validatedChunks.push(plainToInstance(SubtitleChunkDto, stub));
      }
    }

    return validatedChunks;
  }

  extractJsonFromResponse(text: string) {
    const start = text.indexOf('[');
    const end = text.lastIndexOf(']');
    if (start !== -1 && end !== -1 && end > start) {
      const json = text.slice(start, end + 1);
      try {
        return JSON.parse(json);
      } catch (err) {
        console.error('JSON parse error:', err);
      }
    }
    throw new Error('Response did not contain valid JSON array');
  }

  fallbackStub = (text: string) => ({
    text,
    translate: null,
    phrasal_verbs: [],
    idioms: [],
    ai_translate_comment: null,
    ai_translate: null,
  });
}
